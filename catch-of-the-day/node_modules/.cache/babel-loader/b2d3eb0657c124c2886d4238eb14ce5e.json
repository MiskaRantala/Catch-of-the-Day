{"ast":null,"code":"import _classCallCheck from \"/Users/miska/IdeaProjects/React-For-Beginners-Starter-Files-master/catch-of-the-day/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/miska/IdeaProjects/React-For-Beginners-Starter-Files-master/catch-of-the-day/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/miska/IdeaProjects/React-For-Beginners-Starter-Files-master/catch-of-the-day/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/miska/IdeaProjects/React-For-Beginners-Starter-Files-master/catch-of-the-day/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/miska/IdeaProjects/React-For-Beginners-Starter-Files-master/catch-of-the-day/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/miska/IdeaProjects/React-For-Beginners-Starter-Files-master/catch-of-the-day/src/components/Order.js\";\nimport React from \"react\";\nimport { formatPrice } from \"../helpers\";\nimport { TransitionGroup, CSSTransition } from \"react-transition-group\";\n/**\nThis app was created during \"React for Beginners\" -course by Wes Bos.\n\nOrder is for the middle column of the market page.\nIt holds a title and user's order from the market place.\n*/\n\nvar Order =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Order, _React$Component);\n\n  function Order() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Order);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Order)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.renderOrder = function (key) {\n      // shows the fish\n      var fish = _this.props.fishes[key]; // shows how many fish there is\n\n      var count = _this.props.order[key]; // checks if the fish is available\n\n      var isAvailable = fish && fish.status === \"available\";\n      var transitionOptions = {\n        classNames: \"order\",\n        key: key,\n        timeout: {\n          enter: 500,\n          exit: 500\n        } // makes sure the fish is loaded before continuing\n\n      };\n      if (!fish) return null; // if the shop runs out of a certain fish, or the fish is deleted from database\n\n      if (!isAvailable) {\n        return (// animating the order, _animations.styl\n          React.createElement(CSSTransition, {\n            classNames: \"order\",\n            key: key,\n            timeout: {\n              enter: 500,\n              exit: 500\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 41\n            },\n            __self: this\n          }, React.createElement(\"li\", {\n            key: key,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 47\n            },\n            __self: this\n          }, \"Sorry, \", fish ? fish.name : \"fish\", \" is no longer available.\"))\n        );\n      }\n\n      return (// animating the order, _animations.styl\n        React.createElement(CSSTransition, {\n          classNames: \"order\",\n          key: key,\n          timeout: {\n            enter: 500,\n            exit: 500\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 57\n          },\n          __self: this\n        }, React.createElement(\"li\", {\n          key: key,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 63\n          },\n          __self: this\n        }, React.createElement(\"span\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 64\n          },\n          __self: this\n        }, React.createElement(TransitionGroup, {\n          component: \"span\",\n          className: \"count\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 67\n          },\n          __self: this\n        }, React.createElement(CSSTransition, {\n          classNames: \"count\",\n          key: count,\n          timeout: {\n            enter: 500,\n            exit: 500\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 70\n          },\n          __self: this\n        }, React.createElement(\"span\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 75\n          },\n          __self: this\n        }, count))), \"kg \", fish.name, formatPrice(count * fish.price), React.createElement(\"button\", {\n          onClick: function onClick() {\n            return _this.props.removeFromOrder(key);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 86\n          },\n          __self: this\n        }, \"\\xD7\"))))\n      );\n    };\n\n    return _this;\n  }\n\n  _createClass(Order, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      // this picks up the correct fish from the menu\n      var orderIds = Object.keys(this.props.order); // this shows the total price of the order\n\n      var total = orderIds.reduce(function (prevTotal, key) {\n        // shows the fish\n        var fish = _this2.props.fishes[key]; // shows how many fish there is\n\n        var count = _this2.props.order[key]; // checks whether the fish is available or not, even if the fish is in the order already\n\n        var isAvailable = fish && fish.status === \"available\";\n\n        if (isAvailable) {\n          return prevTotal + count * fish.price;\n        }\n\n        return prevTotal;\n      }, 0);\n      return (// has the title and elements inside\n        React.createElement(\"div\", {\n          className: \"order-wrap\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 120\n          },\n          __self: this\n        }, React.createElement(\"h2\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 123\n          },\n          __self: this\n        }, \"Order\"), React.createElement(TransitionGroup, {\n          component: \"ul\",\n          className: \"order\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 126\n          },\n          __self: this\n        }, orderIds.map(this.renderOrder)), React.createElement(\"div\", {\n          className: \"total\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 131\n          },\n          __self: this\n        }, \"Total:\", React.createElement(\"strong\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 133\n          },\n          __self: this\n        }, formatPrice(total))))\n      );\n    }\n  }]);\n\n  return Order;\n}(React.Component); // exports the page\n\n\nexport default Order;","map":{"version":3,"sources":["/Users/miska/IdeaProjects/React-For-Beginners-Starter-Files-master/catch-of-the-day/src/components/Order.js"],"names":["React","formatPrice","TransitionGroup","CSSTransition","Order","renderOrder","key","fish","props","fishes","count","order","isAvailable","status","transitionOptions","classNames","timeout","enter","exit","name","price","removeFromOrder","orderIds","Object","keys","total","reduce","prevTotal","map","Component"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { formatPrice } from \"../helpers\";\nimport { TransitionGroup, CSSTransition } from \"react-transition-group\";\n\n/**\nThis app was created during \"React for Beginners\" -course by Wes Bos.\n\nOrder is for the middle column of the market page.\nIt holds a title and user's order from the market place.\n*/\n\nclass Order extends React.Component {\n\n    // makes the code smoother\n    renderOrder = (key) => {\n\n        // shows the fish\n        const fish = this.props.fishes[key];\n\n        // shows how many fish there is\n        const count = this.props.order[key];\n\n        // checks if the fish is available\n        const isAvailable = fish && fish.status === \"available\";\n\n\n        const transitionOptions = {\n            classNames: \"order\",\n            key,\n            timeout:{enter: 500, exit: 500}\n        }\n\n        // makes sure the fish is loaded before continuing\n        if(!fish) return null;\n\n        // if the shop runs out of a certain fish, or the fish is deleted from database\n        if(!isAvailable) {\n            return (\n\n                // animating the order, _animations.styl\n                <CSSTransition classNames=\"order\"\n                               key={key}\n                               timeout={{enter: 500, exit: 500}}\n                >\n\n                    { /* informing the user if the fish is not available anymore */ }\n                    <li key={key}>\n                        Sorry, {fish ? fish.name : \"fish\"} is no longer available.\n                    </li>\n                </CSSTransition>\n            )\n        }\n\n        return (\n\n            // animating the order, _animations.styl\n            <CSSTransition classNames=\"order\"\n                           key={key}\n                           timeout={{enter: 500, exit: 500}}\n            >\n\n                { /* sends out order-details and the cost */ }\n                <li key={key}>\n                    <span>\n\n                        { /* animates single fish's amount changing */ }\n                        <TransitionGroup component=\"span\"\n                                         className=\"count\"\n                        >\n                            <CSSTransition\n                                classNames=\"count\"\n                                key={count}\n                                timeout={{enter:500, exit: 500}}\n                            >\n                                <span>{count}</span>\n                            </CSSTransition>\n                        </TransitionGroup>\n\n                        { /* sends out fish's name and how it's measured (kg) */ }\n                        kg {fish.name}\n\n                        { /* sends out the total price */ }\n                        {formatPrice(count * fish.price)}\n\n                        { /* button to remove fish from the order */ }\n                        <button onClick={() => this.props.removeFromOrder(key)}>\n                            &times;\n                        </button>\n                    </span>\n                </li>\n            </CSSTransition>\n        )\n    };\n\n    render() {\n\n        // this picks up the correct fish from the menu\n        const orderIds = Object.keys(this.props.order);\n\n        // this shows the total price of the order\n        const total = orderIds.reduce((prevTotal, key) => {\n\n            // shows the fish\n            const fish = this.props.fishes[key];\n\n            // shows how many fish there is\n            const count = this.props.order[key];\n\n            // checks whether the fish is available or not, even if the fish is in the order already\n            const isAvailable = fish && fish.status === \"available\";\n            if (isAvailable) {\n                return prevTotal + (count * fish.price);\n            }\n            return prevTotal;\n        }, 0);\n\n        return (\n\n            // has the title and elements inside\n            <div className=\"order-wrap\">\n\n                { /* title */ }\n                <h2>Order</h2>\n\n                { /* listing everything in the user's order */ }\n                <TransitionGroup component=\"ul\" className=\"order\">\n                    {orderIds.map(this.renderOrder)}\n                </TransitionGroup>\n\n                { /* Shows the total price panel in the app */ }\n                <div className=\"total\">\n                    Total:\n                    <strong>{formatPrice(total)}</strong>\n                </div>\n            </div>\n        );\n    }\n}\n\n// exports the page\nexport default Order;"]},"metadata":{},"sourceType":"module"}