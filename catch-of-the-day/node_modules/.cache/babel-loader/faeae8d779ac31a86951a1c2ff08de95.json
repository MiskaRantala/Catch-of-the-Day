{"ast":null,"code":"import _objectSpread from \"/Users/miska/IdeaProjects/React-For-Beginners-Starter-Files-master/catch-of-the-day/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/Users/miska/IdeaProjects/React-For-Beginners-Starter-Files-master/catch-of-the-day/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/miska/IdeaProjects/React-For-Beginners-Starter-Files-master/catch-of-the-day/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/miska/IdeaProjects/React-For-Beginners-Starter-Files-master/catch-of-the-day/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/miska/IdeaProjects/React-For-Beginners-Starter-Files-master/catch-of-the-day/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/miska/IdeaProjects/React-For-Beginners-Starter-Files-master/catch-of-the-day/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/miska/IdeaProjects/React-For-Beginners-Starter-Files-master/catch-of-the-day/src/components/App.js\";\nimport React from \"react\";\nimport Header from \"./Header\";\nimport Order from \"./Order\";\nimport Inventory from \"./Inventory\";\nimport sampleFishes from \"../sample-fishes\";\nimport Fish from \"./Fish\";\nimport base from \"../base\";\n/**\nThis app was created during \"React for Beginners\" -course by Wes Bos.\n\nApp works as the main application of the store page.\nIt holds the columns for the page and works in the background\n*/\n\nvar App =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(App, _React$Component);\n\n  function App() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(App)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      fishes: {},\n      order: {} // gets the store name from database, so Firebase can connect to it. Data now persists in the database.\n\n    };\n\n    _this.addFish = function (fish) {\n      // takes a copy of the existing state\n      var fishes = _objectSpread({}, _this.state.fishes); // adds our new fish to that fishes variable\n\n\n      fishes[\"fish\".concat(Date.now())] = fish; // sets the new fishes object to state\n\n      _this.setState({\n        fishes: fishes\n      });\n    };\n\n    _this.updateFish = function (key, updatedFish) {\n      // takes a copy of the current state\n      var fishes = _objectSpread({}, _this.state.fishes); // updates that state\n\n\n      fishes[key] = updatedFish; // call setState to update our state object\n    };\n\n    _this.loadSampleFishes = function () {\n      _this.setState({\n        fishes: sampleFishes\n      });\n    };\n\n    _this.addToOrder = function (key) {\n      // takes a copy of state\n      var order = _objectSpread({}, _this.state.order); // either adds to the order, or updates the number in our order\n\n\n      order[key] = order[key] + 1 || 1; // calls setState to update our state object\n\n      _this.setState({\n        order: order\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      // shortening the route\n      var params = this.props.match.params; //first reinstate our local storage\n\n      var localStorageRef = localStorage.getItem(params.storeId); // if there is localStorageRef, set it to state\n\n      if (localStorageRef) {\n        this.setState({\n          order: JSON.parse(localStorageRef)\n        });\n      } // saves fishes to the order\n\n\n      this.ref = base.syncState(\"\".concat(params.storeId, \"/fishes\"), {\n        context: this,\n        state: \"fishes\"\n      });\n    } // this saves user's actions\n\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      localStorage.setItem(this.props.match.params.storeId, JSON.stringify(this.state.order));\n    } // unmounts, so there shouldn't be any data leaks even if the store is changed\n\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      base.removeBinding(this.ref);\n    } // this event saves the inventory's fish into the fishes object\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return (// this div holds the columns for the page\n        React.createElement(\"div\", {\n          className: \"catch-of-the-day\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 105\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"menu\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 108\n          },\n          __self: this\n        }, React.createElement(Header, {\n          tagline: \"Fresh Seafood Market\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 111\n          },\n          __self: this\n        }), React.createElement(\"ul\", {\n          className: \"fishes\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 114\n          },\n          __self: this\n        }, Object.keys(this.state.fishes).map(function (key) {\n          return React.createElement(Fish, {\n            key: key,\n            index: key,\n            details: _this2.state.fishes[key],\n            addToOrder: _this2.addToOrder,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 116\n            },\n            __self: this\n          });\n        }))), React.createElement(Order, {\n          fishes: this.state.fishes,\n          order: this.state.order,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 126\n          },\n          __self: this\n        }), React.createElement(Inventory, {\n          addFish: this.addFish,\n          loadSampleFishes: this.loadSampleFishes,\n          fishes: this.state.fishes,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 129\n          },\n          __self: this\n        }))\n      );\n    }\n  }]);\n\n  return App;\n}(React.Component); // exports the page\n\n\nexport default App;","map":{"version":3,"sources":["/Users/miska/IdeaProjects/React-For-Beginners-Starter-Files-master/catch-of-the-day/src/components/App.js"],"names":["React","Header","Order","Inventory","sampleFishes","Fish","base","App","state","fishes","order","addFish","fish","Date","now","setState","updateFish","key","updatedFish","loadSampleFishes","addToOrder","params","props","match","localStorageRef","localStorage","getItem","storeId","JSON","parse","ref","syncState","context","setItem","stringify","removeBinding","Object","keys","map","Component"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,YAAP,MAAyB,kBAAzB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,IAAP,MAAiB,SAAjB;AAEA;;;;;;;IAOMC,G;;;;;;;;;;;;;;;;;UAGFC,K,GAAQ;AACJC,MAAAA,MAAM,EAAE,EADJ;AAEJC,MAAAA,KAAK,EAAE,EAFH,CAKR;;AALQ,K;;UAwCRC,O,GAAU,UAAAC,IAAI,EAAI;AAEd;AACA,UAAMH,MAAM,qBAAQ,MAAKD,KAAL,CAAWC,MAAnB,CAAZ,CAHc,CAKd;;;AACAA,MAAAA,MAAM,eAAQI,IAAI,CAACC,GAAL,EAAR,EAAN,GAA8BF,IAA9B,CANc,CAQd;;AACA,YAAKG,QAAL,CAAc;AAAEN,QAAAA,MAAM,EAANA;AAAF,OAAd;AACH,K;;UAGDO,U,GAAa,UAACC,GAAD,EAAMC,WAAN,EAAsB;AAE/B;AACA,UAAMT,MAAM,qBAAQ,MAAKD,KAAL,CAAWC,MAAnB,CAAZ,CAH+B,CAK/B;;;AACAA,MAAAA,MAAM,CAACQ,GAAD,CAAN,GAAcC,WAAd,CAN+B,CAQ/B;AACH,K;;UAGDC,gB,GAAmB,YAAM;AACrB,YAAKJ,QAAL,CAAc;AAAEN,QAAAA,MAAM,EAAEL;AAAV,OAAd;AACH,K;;UAGDgB,U,GAAa,UAACH,GAAD,EAAS;AAElB;AACA,UAAMP,KAAK,qBAAQ,MAAKF,KAAL,CAAWE,KAAnB,CAAX,CAHkB,CAKlB;;;AACAA,MAAAA,KAAK,CAACO,GAAD,CAAL,GAAaP,KAAK,CAACO,GAAD,CAAL,GAAa,CAAb,IAAkB,CAA/B,CANkB,CAQlB;;AACA,YAAKF,QAAL,CAAc;AAAEL,QAAAA,KAAK,EAALA;AAAF,OAAd;AACH,K;;;;;;;wCA1EmB;AAEhB;AAFgB,UAGRW,MAHQ,GAGG,KAAKC,KAAL,CAAWC,KAHd,CAGRF,MAHQ,EAKhB;;AACA,UAAMG,eAAe,GAAGC,YAAY,CAACC,OAAb,CAAqBL,MAAM,CAACM,OAA5B,CAAxB,CANgB,CAQhB;;AACA,UAAGH,eAAH,EAAoB;AAChB,aAAKT,QAAL,CAAc;AAACL,UAAAA,KAAK,EAAEkB,IAAI,CAACC,KAAL,CAAWL,eAAX;AAAR,SAAd;AACH,OAXe,CAahB;;;AACA,WAAKM,GAAL,GAAWxB,IAAI,CAACyB,SAAL,WAAkBV,MAAM,CAACM,OAAzB,cAA2C;AAClDK,QAAAA,OAAO,EAAE,IADyC;AAElDxB,QAAAA,KAAK,EAAE;AAF2C,OAA3C,CAAX;AAIH,K,CAED;;;;yCACqB;AACjBiB,MAAAA,YAAY,CAACQ,OAAb,CACI,KAAKX,KAAL,CAAWC,KAAX,CAAiBF,MAAjB,CAAwBM,OAD5B,EAEIC,IAAI,CAACM,SAAL,CAAe,KAAK1B,KAAL,CAAWE,KAA1B,CAFJ;AAIH,K,CAED;;;;2CACuB;AACnBJ,MAAAA,IAAI,CAAC6B,aAAL,CAAmB,KAAKL,GAAxB;AACH,K,CAED;;;;6BA2CS;AAAA;;AACL,aAEI;AACA;AAAK,UAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAGI;AAAK,UAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAGI,oBAAC,MAAD;AAAQ,UAAA,OAAO,EAAC,sBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAHJ,EAMI;AAAI,UAAA,SAAS,EAAC,QAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACKM,MAAM,CAACC,IAAP,CAAY,KAAK7B,KAAL,CAAWC,MAAvB,EACO6B,GADP,CACW,UAAArB,GAAG;AAAA,iBAAI,oBAAC,IAAD;AACR,YAAA,GAAG,EAAEA,GADG;AAER,YAAA,KAAK,EAAEA,GAFC;AAGR,YAAA,OAAO,EAAE,MAAI,CAACT,KAAL,CAAWC,MAAX,CAAkBQ,GAAlB,CAHD;AAIR,YAAA,UAAU,EAAE,MAAI,CAACG,UAJT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAJ;AAAA,SADd,CADL,CANJ,CAHJ,EAqBI,oBAAC,KAAD;AAAO,UAAA,MAAM,EAAE,KAAKZ,KAAL,CAAWC,MAA1B;AAAkC,UAAA,KAAK,EAAE,KAAKD,KAAL,CAAWE,KAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UArBJ,EAwBI,oBAAC,SAAD;AAAW,UAAA,OAAO,EAAE,KAAKC,OAAzB;AACW,UAAA,gBAAgB,EAAE,KAAKQ,gBADlC;AAEW,UAAA,MAAM,EAAE,KAAKX,KAAL,CAAWC,MAF9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAxBJ;AAHJ;AAiCH;;;;EAvHaT,KAAK,CAACuC,S,GA0HxB;;;AACA,eAAehC,GAAf","sourcesContent":["import React from \"react\";\nimport Header from \"./Header\";\nimport Order from \"./Order\";\nimport Inventory from \"./Inventory\";\nimport sampleFishes from \"../sample-fishes\";\nimport Fish from \"./Fish\";\nimport base from \"../base\";\n\n/**\nThis app was created during \"React for Beginners\" -course by Wes Bos.\n\nApp works as the main application of the store page.\nIt holds the columns for the page and works in the background\n*/\n\nclass App extends React.Component {\n\n    // creates states for the objects\n    state = {\n        fishes: {},\n        order: {}\n    }\n\n    // gets the store name from database, so Firebase can connect to it. Data now persists in the database.\n    componentDidMount() {\n\n        // shortening the route\n        const { params } = this.props.match;\n\n        //first reinstate our local storage\n        const localStorageRef = localStorage.getItem(params.storeId);\n\n        // if there is localStorageRef, set it to state\n        if(localStorageRef) {\n            this.setState({order: JSON.parse(localStorageRef)});\n        }\n\n        // saves fishes to the order\n        this.ref = base.syncState(`${params.storeId}/fishes`, {\n            context: this,\n            state: \"fishes\"\n        });\n    }\n\n    // this saves user's actions\n    componentDidUpdate() {\n        localStorage.setItem(\n            this.props.match.params.storeId,\n            JSON.stringify(this.state.order)\n        );\n    }\n\n    // unmounts, so there shouldn't be any data leaks even if the store is changed\n    componentWillUnmount() {\n        base.removeBinding(this.ref);\n    }\n\n    // this event saves the inventory's fish into the fishes object\n    addFish = fish => {\n\n        // takes a copy of the existing state\n        const fishes = { ...this.state.fishes };\n\n        // adds our new fish to that fishes variable\n        fishes[`fish${Date.now()}`] = fish;\n\n        // sets the new fishes object to state\n        this.setState({ fishes });\n    };\n\n    // this event makes the user able to edit fishes' information on the page\n    updateFish = (key, updatedFish) => {\n\n        // takes a copy of the current state\n        const fishes = { ...this.state.fishes };\n\n        // updates that state\n        fishes[key] = updatedFish;\n\n        // call setState to update our state object\n    }\n\n    // creates a bunch of sample fishes for the menu, so user doesn't need to add everything in\n    loadSampleFishes = () => {\n        this.setState({ fishes: sampleFishes });\n    }\n\n    // adds the fish to the order after clicking the button\n    addToOrder = (key) => {\n\n        // takes a copy of state\n        const order = { ...this.state.order };\n\n        // either adds to the order, or updates the number in our order\n        order[key] = order[key] + 1 || 1;\n\n        // calls setState to update our state object\n        this.setState({ order });\n    };\n\n    render() {\n        return (\n\n            // this div holds the columns for the page\n            <div className=\"catch-of-the-day\">\n\n                { /* Menu-column, find all available fish there */ }\n                <div className=\"menu\">\n\n                    { /* tag line under page title */ }\n                    <Header tagline=\"Fresh Seafood Market\" />\n\n                    { /* fishes and their functionality on the menu */ }\n                    <ul className=\"fishes\">\n                        {Object.keys(this.state.fishes)\n                               .map(key => <Fish\n                                   key={key}\n                                   index={key}\n                                   details={this.state.fishes[key]}\n                                   addToOrder={this.addToOrder}\n                               />)}\n                    </ul>\n                </div>\n\n                { /* Order-column, find your order there */ }\n                <Order fishes={this.state.fishes} order={this.state.order} />\n\n                { /* Inventory-column, add and delete fishes/fish information there */ }\n                <Inventory addFish={this.addFish}\n                           loadSampleFishes={this.loadSampleFishes}\n                           fishes={this.state.fishes}\n                />\n            </div>\n        );\n    }\n}\n\n// exports the page\nexport default App;"]},"metadata":{},"sourceType":"module"}